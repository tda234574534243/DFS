#include <iostream>
#include <bits/stdc++.h>
using namespace std;

const int MAX = 100;

// Kh?i t?o GRAPH
struct GRAPH{
    int sodinh;
    int a[MAX][MAX];
    int visited[MAX];
    int LuuVet[MAX];
};

// Nh?p vào ma tr?n
void NhapMaTran(GRAPH& g){
    cin >> g.sodinh;
    for (int i = 0; i < g.sodinh; i++){
        for (int j = 0; j < g.sodinh; j++){
            cin >> g.a[i][j]; 
        }
    }
}

// Hàm ki?m tra ma tr?n h?p l?
bool KiemTraMaTranKeHopLe(GRAPH& g){
    for (int i = 0; i < g.sodinh; i++){
        if (g.a[i][i] != 0){
            return false;
        }
    }
    return true;
}

// Hàm ki?m tra d? th? d?i x?ng
bool KiemTraDoThiDoiXung(GRAPH& g){
    for (int i = 0; i < g.sodinh; i++){
        for (int j = 0; j < g.sodinh; j++){
            if (g.a[i][j] != g.a[j][i]){
                return false;
            }
        }
    }
    return true;
}

// Xác d?nh s? c?nh c?a d? th? vô hu?ng
int SoCanhVoHuong(GRAPH &g){
    int count = 0;
    for (int i = 0; i < g.sodinh; i++){
        for (int j = i + 1; j < g.sodinh; j++){
            if(g.a[i][j] != 0){
                count++;
            }
        }
    }
    return count;
}

// Xác d?nh s? c?nh c?a d? th? có hu?ng
int SoCanhCoHuong(GRAPH& g){
    int count = 0;
    for (int i = 0;i < g.sodinh; i++){
        for (int j = 0;j < g.sodinh; j++){
            if(g.a[i][j] != 0){
                count++;
            }
        }
    }
    return count;
}

// Xác d?nh b?c c?a d?nh và tìm ra b?c l?n nh?t và nh? nh?t c?a d?nh (Vô hu?ng)
void BacCuaDinhVoHuong(GRAPH g){
    int max_deg = 0;
    int min_deg = MAX; 
    int posmax = 0;
    int posmin = 0;

    for (int i = 0; i < g.sodinh; i++){
        int count = 0;
        for (int j = 0; j < g.sodinh; j++){
            count += g.a[i][j];
            if (i == j) {  
                count += g.a[i][j]; // N?u có c?nh l?p l?i
            }
        }
        cout << "Bac cua dinh " << i << " la: " << count << endl;
        if (count > max_deg){
            max_deg = count;
            posmax = i;
        }
        if (count < min_deg){
            min_deg = count;
            posmin = i;
        }
    }
    
    cout << "Bac lon nhat la dinh: " << posmax << ", Bac: " << max_deg << endl;
    cout << "Bac be nhat la dinh: " << posmin << ", Bac: " << min_deg << endl;
    cout << endl;
    
    // Tìm các d?nh có b?c ch?n
    for (int i = 0; i < g.sodinh; i++){
        int count = 0;
        for (int j = 0; j < g.sodinh; j++){
            count += g.a[i][j];
            if (i == j) {  
                count += g.a[i][j];
            }
        }
        if (count % 2 == 0){
            cout << "Dinh bac chan la dinh " << i << ", Bac: " << count << endl;
        }
    }
    
    // Tìm các d?nh có b?c l?
    for (int i = 0; i < g.sodinh; i++){
        int count = 0;
        for (int j = 0; j < g.sodinh; j++){
            count += g.a[i][j];
            if (i == j) {  
                count += g.a[i][j];
            }
        }
        if (count % 2 != 0){
            cout << "Dinh bac le la dinh " << i << ", Bac: " << count << endl;
        }
    }
}

// Tìm b?c c?a d?nh có hu?ng và tìm ra b?c l?n nh?t và nh? nh?t c?a d?nh
void BacCuaDinhCoHuong(GRAPH g){
    int max_deg = 0;
    int min_deg = MAX; 
    int posmax = 0;
    int posmin = 0;
    
    for (int i = 0; i < g.sodinh; i++){
        int bacvao = 0;
        int bacra = 0;
        for (int j = 0; j < g.sodinh; j++){
            bacvao += g.a[j][i];
        }
        for (int j = 0; j < g.sodinh; j++){
            bacra += g.a[i][j];
        }
        
        int tongbac = bacvao + bacra;
        if (tongbac > max_deg){
            max_deg = tongbac;
            posmax = i;
        }
        if (tongbac < min_deg){
            min_deg = tongbac;
            posmin = i;
        }
        cout << "Bac cua dinh " << i << ": Bac vao = " << bacvao << ", Bac ra = " << bacra << endl;
    }
    
    cout << "Bac dinh lon nhat la dinh: " << posmax << ", Bac: " << max_deg << endl;
    cout << "Bac dinh be nhat la dinh: " << posmin << ", Bac: " << min_deg << endl;
    cout << endl;
    
    // Tìm các d?nh có b?c ch?n
    for (int i = 0; i < g.sodinh; i++){
        int bacvao = 0;
        int bacra = 0;
        for (int j = 0; j < g.sodinh; j++){
            bacvao += g.a[j][i];
        }
        for (int j = 0; j < g.sodinh; j++){
            bacra += g.a[i][j];
        }
        int tongbac = bacvao + bacra;
        if (tongbac % 2 == 0){
            cout << "Dinh bac chan la dinh " << i << ", Bac:" << tongbac << endl;
        }
    }
    
    // Tìm các d?nh có b?c l?
    for (int i = 0; i < g.sodinh; i++){
        int bacvao = 0;
        int bacra = 0;
        for (int j = 0; j < g.sodinh; j++){
            bacvao += g.a[j][i];
        }
        for (int j = 0; j < g.sodinh; j++){
            bacra += g.a[i][j];
        }
        int tongbac = bacvao + bacra;
        if (tongbac % 2 != 0){
            cout << "Dinh bac le la dinh " << i << ", Bac:" << tongbac << endl;
        }
    }
}

// Ki?m tra d?nh trong d? th? vô hu?ng
void CheckDinhVoHuong(GRAPH& g){
    for (int i = 0; i < g.sodinh; i++){
        int count = 0;
        for (int j = 0; j < g.sodinh; j++){
            count += g.a[i][j];
            if (i == j) {  
                count += g.a[i][j];
            }
        }
        if (count == 1){
            cout << "Dinh " << i << " la dinh treo" << endl;
        }
        else if (count == 0){
            cout << "Dinh " << i << " la dinh co lap" << endl;
        }
    }
}

// Ki?m tra d?nh trong d? th? có hu?ng
void CheckDinhCoHuong(GRAPH& g){
    for (int i = 0; i < g.sodinh; i++){
        int bacvao = 0;
        int bacra = 0;
        for (int j = 0; j < g.sodinh; j++){
            bacvao += g.a[j][i];
        }
        for (int j = 0; j < g.sodinh; j++){
            bacra += g.a[i][j];
        }
        int tongbac = bacvao + bacra;
        if (tongbac == 0){
            cout << "Dinh " << i << " la dinh co lap" << endl;
        }
        else if (tongbac == 1){
            cout << "Dinh " << i << " la dinh treo" << endl;
        }
    }
}

// Xu?t ma tr?n
void KetQuaMaTran(GRAPH g){
    for (int i = 0; i < g.sodinh; i++){
        for (int j = 0; j < g.sodinh; j++){
            cout << g.a[i][j] << " ";
        }
        cout << endl;
    }
}

// Hàm DFS
void DFS(int s, GRAPH& g){
    // Ðánh d?u d?nh dã duy?t
    g.visited[s] = 1;
    // Tìm t? d?nh s có d?nh i nào chua du?c duy?t và n?i tr?c ti?p v?i s
    for (int i = 0; i < g.sodinh; i++){
        if(g.visited[i] == 0 && g.a[s][i] != 0){
            g.LuuVet[i] = s;
            DFS(i, g);
        }
    }
}

// Hàm tìm du?ng di t? d?nh s d?n d?nh f trong d? th? g
void DuyetS(int s, int f, GRAPH& g){
    // Kh?i t?o các giá tr? ban d?u
    for (int i = 0; i < g.sodinh; i++){
        g.visited[i] = 0;
        g.LuuVet[i] = -1;
    }
    
    // Th?c hi?n DFS t? d?nh s
    DFS(s, g);
    
    // Ki?m tra xem có du?ng di t? s d?n f hay không
    if (g.LuuVet[f] == -1 && s != f){
        cout << "Khong co duong di tu dinh " << s << " toi dinh " << f << endl; 
    }
    else {
        // N?u có du?ng di, l?n theo m?ng LuuVet d? tìm du?ng
        vector<int> path;
        int current = f;
        
        // N?u s == f và có ít nh?t m?t l?n g?i DFS t? s d?n s
        if (s == f && g.LuuVet[f] == -1){
            path.push_back(s);
        }
        else {
            while (current != s && current != -1){
                path.push_back(current);
                current = g.LuuVet[current];
            }
            if(current == -1){
                // Không tìm th?y du?ng di
                cout << "Khong co duong di tu dinh " << s << " toi dinh " << f << endl;
                return;
            }
            path.push_back(s);
        }
        
        // Xu?t du?ng di (ngu?c l?i vì duy?t t? f v? s)
        cout << "Duong di tu dinh " << s << " den dinh " << f << ": ";
        for(int i = path.size() - 1; i >=0 ; i--){
            cout << path[i];
            if(i !=0){
                cout << " -> ";
            }
        }
        cout << endl;
    }
}

int main(){
    GRAPH g; // Kh?i t?o d? th? 
    
    cout << "Nhap so dinh va ma tran ke:\n";
    NhapMaTran(g); 
    
    // Ki?m tra ma tr?n h?p l?
    if (!KiemTraMaTranKeHopLe(g)){
        cout << "Ma tran khong hop le!" << endl;
    }
    else {
        cout << "Ma tran hop le" << endl;
    }
    
    // Ki?m tra d? th? d?i x?ng
    if (!KiemTraDoThiDoiXung(g)){
        cout << "Do thi khong doi xung!" << endl;
        cout << "=> Do thi co huong" << endl;
        cout << endl;
        cout << "So dinh cua do thi: " << g.sodinh << endl;
        cout << "So canh cua do thi co huong la: " << SoCanhCoHuong(g) << endl;
        cout << endl;
        BacCuaDinhCoHuong(g);
        cout << endl;
        CheckDinhCoHuong(g);
        cout << endl;
    }
    else {
        cout << "Do thi doi xung" << endl;
        cout << "=> Do thi vo huong" << endl;
        cout << endl;
        cout << "So dinh cua do thi: " << g.sodinh << endl;
        cout << "So canh cua do thi vo huong la: " << SoCanhVoHuong(g) << endl;
        cout << endl;
        BacCuaDinhVoHuong(g);
        cout << endl;
        CheckDinhVoHuong(g);
        cout << endl;
    }
    
    // Xu?t ma tr?n
    cout << "Ma tran ke cua do thi:\n";
    KetQuaMaTran(g);
    cout << endl;
    
    // Tìm du?ng di t? s d?n f
    int s, f;
    cout << "Nhap dinh bat dau (s) va dinh ket thuc (f): ";
    cin >> s >> f;
    
    // Ki?m tra xem s và f có h?p l? hay không
    if(s < 0 || s >= g.sodinh || f < 0 || f >= g.sodinh){
        cout << "Dinh bat dau hoac dinh ket thuc khong hop le!" << endl;
    }
    else {
        DuyetS(s, f, g);
    }
    
    return 0;
}
